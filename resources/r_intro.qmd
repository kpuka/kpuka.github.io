---
title: Introduction to R
---

Topic: Introduction to data wrangling and data management with R. 

R is a powerful programming language and software environment widely used for statistical computing, data analysis, and graphical visualization. 

# Getting Started

To get started, you will need to install R and RStudio; to do so <a href="https://posit.co/download/rstudio-desktop/" target="_blank">click here</a>. 

To use R, launch RStudio. RStudio provides a user-friendly interface for working with R. 

For each project, you should use "R Projects", a self-contained directory that holds all the files, data, R scripts, and other resources related to a particular data analysis task or research project. Follow the steps below to create an R Project. 

![](files/r_intro/RStudio1.png)

:::{.callout-important}
Upon creating an 'R Project', a folder will be created in the location that was specified; this folder should contain all of the files needed for your analyses (e.g., the data and R scripts/code). 

In that folder, a ".Rproj" file will also be created (in this example, called "MyProject.Rproj"); this is the file you should open in the future when you want to work with your data in R. 
:::

<br>
Next, lets create an R script; this will be the file that will contain your R code.
![](files/r_intro/RStudio2.png){width=80%}


<br>
Now, lets examine RStudio and its different components. 
![](files/r_intro/RStudio3.png)


The **script editor** is where you write and edit your R code. The **console** is where you see the output of your commands and interact with R directly. The **environment panel** displays information about the variables and objects in your current R session, while the **files panel** allows you to navigate your computer's file system and manage your R projects. 

:::{.callout-important}
All of the R code provided below in this tutorial should be entered into the 'Script Editor'. 

To run/execute the code, highlight the portion of code you would like to execute and press "Run" (located in the top right corner of the script editor). On Windows, you can also use the shortcut "Ctrl + Enter".
:::


# R Basics

## Functions and Packages

-   **Functions** essential building blocks that enable you to perform specific tasks efficiently. They are like a set of instructions designed to carry out various operations, saving you from having to write complex code each time you want to perform a common task.
    -    In R, a function is a named block of code that takes inputs (arguments) and returns outputs (results). 
    -    For example, `mean()` calculates the mean of a set of numbers, so you don't have to write the formula to calculate the mean each time
-   **Packages**, just like smartphone apps, are created by individuals/groups and extend the functionality of R by providing a a collection of functions
-   To use packages:
    -   *First time only*: install the package using `install.packages("package_name")`
    -   *Each time you open R*: load the package using `library(package_name)`
-   Sometimes, different packages may use the same function name
    -   To specify the package and function name:  `package_name::function_name()`
-   **R's vast collection of packages, combined with the ability to create your own functions, make it a powerful tool**  


## Basic Operations and Functions

| Operator     | Description |
|-----------|-------------------------------------------------------------|
| $            | Used to access/refer to specific elements/variables *within* a data frame or list|
| \<-          | "save as". Arrow pointing to the left - the object on the left will be defined/crehtated based on the instructions on the right  |
| \|\> <br> %\>% | "and then", will take the output from the first function and use it as the first input of the second function. For example: <br> `function(data, arguments)` is the same as <br> `data |> function(arguments)` |
| ( )          | Used primarily to specify the arguments of a function   |
| c( )         | Is a function allowing you to combine multiple elements into a single object. It stands for 'combine' or 'concatenate' |
| \|           | Or |
| &            | And |



## Resources and Help Files {.smaller}

-   Helpful books include [R for Data Science](https://r4ds.had.co.nz/index.html) and [Advanced R](https://adv-r.hadley.nz/)
-   Many packages also have websites, such as [https://www.tidyverse.org/packages/](https://www.tidyverse.org/packages/)
    -   Google, and more recently chatGPT, will be your best friend
-   R has built-in help files that provide syntax, arguments, usage, and examples 
    -   To access a help file, use `?` followed by the function name (e.g. `?mean`)

    
```{r}
#| eval: false
?mean
```

<iframe src="https://stat.ethz.ch/R-manual/R-devel/library/base/html/mean.html" style="height:50%; width:100%;"></iframe>

<br>


# Today's Data

```{r}
#| echo: false

# Create subset of data from the full NHIS 2018 Sample Adult file
# set.seed(111)
# nhis2018 <- read.csv("r_intro/nhis_2018_SampleAdult_complete.csv") %>%
#   sample_n(500) %>%
#   mutate(ID= 1:500) %>%
#   select(ID, REGION, AGE_P, SEX, R_MARITL, AHEIGHT, AWEIGHTP, ASISLEEP, HYPEV, CHLEV, DIBEV1,
#          AHSTATYR, SMKSTAT2, ASISAD, ASINERV, ASIRSTLS, ASIHOPLS, ASIEFFRT, ASIWTHLS)
# 
# write.csv(nhis2018, "r_intro/nhis2018_sampleadult.csv", row.names = FALSE)

```

Will be using publicly available data from the 2018 US National Health Interview Survey (NHIS).

-   This is an annual, cross-sectional survey of the US population; full data and details available <a href="https://www.cdc.gov/nchs/nhis/nhis_2018_data_release.html" target=_"blank"> here</a>
-   We will use a subset of the data from the "Sample Adult Interview":
    -   To download this data, <a href="files/r_intro/nhis2018_SampleAdult.csv" target="_blank">click here</a>
    -   To download the codebook, <a href="files/r_intro/nhis_codebook.csv" target="_blank">click here</a> 
    

:::{.callout-tip collapse="true"}
## Data
```{r}
#| echo: false
#| code-summary: Codebook
#| code-fold: true
install.packages("kableExtra")
library(knitr)
library(kableExtra)
read.csv("files/r_intro/nhis2018_SampleAdult.csv") |> 
  kable() |> kable_styling(font_size = 12)|>
  scroll_box(height = "500px")

```
:::

:::{.callout-tip collapse="true"}
## Codebook
```{r}
#| echo: false

read.csv("files/r_intro/nhis_codebook.csv") |> 
  kable() |> kable_styling(font_size = 14) |>
  scroll_box(height = "500px")

```
:::

<br>

# Import/Export Data 

## Import Data into R

-   Place the data file in the same folder as the ".Rproj" file (the file that was created when you created an R Project)
-   In R, use `read.csv()` opens CSV files; specify the file location/name

```{r}
#| echo: false
nhis2018 <- read.csv("files/r_intro/nhis2018_SampleAdult.csv")
```

```{r}
#| eval: false
nhis2018 <- read.csv("nhis2018_SampleAdult.csv")

  # read.csv() reads the file
  # "<-" is used to assign/save the data to an object named 'nhis2018'

```

#### Files located in other folders 

If the data file is located in a different folder, the location needs to be specified. Because we created an R Project, R will start by looking at the folder that contains the ".Rproj" file (the file that was created when you created an R Project).

-   If the data was in a folder called 'data' within the folder containing ".Rproj", the code is: `nhis2018 <- read.csv("data/nhis2018_SampleAdult.csv")`
-   If the data was in a folder that is 'a level above' the folder containing ".Rproj", the code is: `nhis2018 <- read.csv("../nhis2018_SampleAdult.csv")`


#### Load other file types

-   R: `nhis2018 <- readRDS("data_name.R")`
-   Excel: `nhis2018 <- read_excel("data_name.xlsx")` (*readxl* package)







## Exporting Data from R

Use `saveRDS()` to save as an R object 

-   Specify the object to save, then the location and name of the file to be saved

```{r}
#| eval: false
saveRDS(nhis2018, "updated_nhis2018.R")

```

<br>

Use `write.csv()` to save as a CSV file
```{r}
#| eval: false
write.csv(nhis2018, "updated_nhis2018.csv")
```



# Basic Descriptives 

#### Getting to know your data file and variables
<br>


Use `str()` to get a summary of data file, providing information on:

-   The number of observations (rows) and variables (columns)
-   The name of each variable, along with:
    -   The type of variable (discussed later), and the first few values of the variable 
```{r}
str(nhis2018)
```
<br>


Use `head()` to print the first few observations:
```{r}
head(nhis2018, 5)  # 5 indicates that the first 5 observations should be shown
```
<br>


Use `names()` to print all the variable names:
```{r}
names(nhis2018)

```
<br>


#### Use the `$` operator to access variables within data 

Use `table()` to print a basic frequency table
```{r}
# Frequency table for the variable 'sex' within 'nhis2018'
table(nhis2018$SEX)   # 1 = Male, 2= Female (see codebook)

# Frequency table the variables 'SEX' by 'R_MARITL' with 'nhis2018' 
table(nhis2018$SEX, nhis2018$R_MARITL) # R_MARITL is coded as 1 to 9 (see codebook)
```
<br>


Use `count()` from the *tidyverse* package to print the number of unique values of one or more variables

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
library(tidyverse)
count(nhis2018, SEX)
```

<br><br>
These tables have a row for each unique combination of the variables, and an additional column (n) which indicates the count of observations for each unique combination of the variables.

For example, there are 233 individuals with SEX="1". Similarly, there are 107 individuals with SEX="1" and "R_MARITL"=1.

:::

::: {.column width="10%"}
:::

::: {.column width="40%"}
```{r}
#| warning: false
library(tidyverse)
count(nhis2018, SEX, R_MARITL)     
```
:::
:::


<br>


Use `mean()`, `sd()`, `min()`, `max()` to get basic descriptives.
```{r}
mean(nhis2018$AHEIGHT, na.rm=TRUE) # "na.rm=TRUE" tells R to ignore missing data
sd(nhis2018$AHEIGHT,  na.rm=TRUE)
min(nhis2018$AHEIGHT, na.rm=TRUE)
max(nhis2018$AHEIGHT, na.rm=TRUE)
```
<br>


Use `skim()` from the *skimr* package to print a comprehensive descriptive statistics of one or more variables
```{r}
# install.packages("skimr")
library(skimr)
skim(nhis2018, SEX, AHEIGHT, R_MARITL) 

```
<br>


# Variable Types in R

| Type                 | Example       |
|----------------------|-------------|
|	numeric / double     | 2, 15.5, -3.1 |
|	logical              | TRUE, FALSE   |
|	character / string   | "a", "male"   | 
|	factor               | "a", "male"   |

-   Strings vs Factors
    -   Strings and factors can both represent categorical data
    -   *Factors*: more efficient; built-in support for levels/ordering
    -   *Strings*: more flexible; use more memory and can be slower
    -   Factors are preferred for working with categorical data in R

<br>

-   Use `str()` or `class()` to check the type
    -   e.g., `str(data_name)` or `str(data_name$variable_name)`
    
-   To change between variable types use: `as.numeric()`, `as.character()`, `as.factor()`
    -   e.g., `data_name$variable <- as.numeric(data_name$variable_name)`



## Labeling Variables

-   Use `factor()` to create and label factors 
    -   **_Importantly_**, the first level listed will be the 'reference' level used in statistical models
    -   Alternatively, use `relevel()` to change the reference level
-   Consider creating a new variable for the labeled version, e.g. "variable_name.factor"
    -   This gives two versions of the variable - one coded numerically, the other by labels

::: columns
::: {.column width="70%"}
```{r}
# Create factor for 'sex', reference level=Female
nhis2018$SEX.factor <- factor(nhis2018$SEX,
                              levels=c(2, 1),
                              labels =c("Women", 
                                        "Men"))



# Change reference level of an exist factor
nhis2018$SEX.factor <- relevel(nhis2018$SEX.factor, 
                               ref = "Men")    

```
:::

::: {.column width="30%; font-size: 75%;"}
```{r}
#| echo: false

library(tidyverse)
library(gt)
nhis2018 |>
  select(ID, SEX, SEX.factor) |>
  slice(1:6) |> 
  gt() |> tab_header(title="Result:")

```
:::
:::



# Data Cleaning

## Clean data frame (overall)

The *janitor* package provides several functions for cleaning and tidying data.

-   `clean_names()` converts column names to a consistent format (easier to work with)
-   `remove_empty()` removes rows and/or columns that contain only missing values

::: columns
::: {.column width="40%"}
```{r}
#| eval: false

install.packages("janitor")
library(janitor)        

nhis2018 <- nhis2018 |> 
  clean_names() |> 
  remove_empty ("cols")


# check variable names 
names(nhis2018)
```
:::

::: {.column width="60%; font-size: 70%;"}
Original variable names:
```{r}
#| echo: false
names (nhis2018)
```

New variable names:
```{r}
#| echo: false
#| warning: false

library(janitor)        

nhis2018 <- nhis2018 |> 
  clean_names() |> 
  remove_empty ("cols")

names (nhis2018)
```
:::
:::



## Tidyverse Package 

-   Is a collection of packages with tools for data manipulation, visualization, and modeling

```{r}
#| eval: false
install.packages("tidyverse") # Install the package (first time only)
library(tidyverse)            # Load the package (each time you load R)
```

```{r}
#| echo: false
library(tidyverse)
```

Contains several functions that will be used throughout the workshop, including: 

-   `rename()` change the name of a column (aka variables)
-   `filter()` keeps or discards rows (aka observations)
-   `select()` keeps or discards columns (aka variables)
-   `arrange()`sorts data set by certain variable(s)
-   `count()` tallies data set by certain variable(s)
-   `mutate()`creates new variables
-   `summarize()` aggregates data

Typically, the first argument in these functions is the data frame, followed by the operation you want to perform


## Rename Variables

-   Use `rename()` to change the names of variables
-   First argument is the data frame, followed by a list of *'new_name = old_name'* statements

```{r}
nhis2018 <- nhis2018 |>
  rename(age = age_p,
         marital = r_maritl,
         height_in = aheight,
         weight_lb = aweightp,
         sleep_hrs = asisleep,
         health_chage = ahstatyr,
         smoking = smkstat2)

# Check
names(nhis2018)

```


## Remove/Keep *observations*

Use `filter()` to specify the *rows* (aka observations) to **_keep_**

Specify the data frame, followed by the conditions you want to keep:

::: columns
::: {.column width="40%"}
```{r}
#| eval: false

# Keep only rows where region > 1
nhis2018 <- nhis2018 |>
  filter(region >1)

# check
count(nhis2018, region)  

```
:::

::: {.column width="5%"}
:::

::: {.column width="20%; font-size: 85%;"}
Old frequncy:
```{r}
#| echo: false
count(nhis2018, region)|> 
  kable()
```
:::

::: {.column width="5%"}
:::

::: {.column width="20%; font-size: 85%;"}
New frequncy:
```{r}
#| echo: false
nhis2018 <- nhis2018 |>
  filter(region >1)

count(nhis2018, region)|> 
  kable()

```
:::
:::


#### Other examples, using different operators:

| Code                                   | Description of rows to *keep*   |
|----------------------------------------|-------------------------------------|
|`filter(region == 1 & sex == 1)`        | region equals 1 AND sex equals 1 | 
|`filter(region == 1 | marital >3)`      | region equals 1 OR marital greater than 3 | 
|`filter(marital %in% c(1,3))`           | marital is equal to 1 or 3 | 
|`filter(is.na(marital))`                | marital is missing | 
|`filter(marital != 3)`                  | marital does not equal 3 | 
|`filter(!is.na(marital))`               | marital is not missing | 



## Remove/Keep *variables*

Use `select()` to specify the *columns* (aka variables) to **_keep_**

Specify the data frame, followed by the conditions you want to keep

```{r}
#| output: false

# Remove the 'sex' column (given the prefix '-')
nhis2018 <- nhis2018 |>
  select(-sex)  

# Check
head(nhis2018, 10)
```

:::{style="font-size: 50%;"}
```{r}
#| echo: false
head(nhis2018, 10) |> gt()
```
:::


#### Other examples, using different operators

<br>


| Code                         | Description of columns to *keep*   |
|------------------------------|-------------------------------------|
|`select(age, marital, sex)`   | the variables listed *(in the order listed)* |
|`select(age:sleep_hrs)`       | the variables from *age* to *sleep_hrs*|
|`select(contains("sleep"))`   | the variables that contain "sleep"|
|`select(starts_with("slee"))` | the variables that start with "slee"|
|`select(where(is.numeric))`   | the variables which are numeric|

<br>



## Move columns

Use `relocate()` to move columns within a data frame

Specify the data frame, followed by the new order of the columns

```{r}
#| output: false

# move the variable 'sex_factor' to appear before the 'age' variable 
nhis2018 <- nhis2018 |> 
  relocate(sex_factor, .before = age)

# Check 
head(nhis2018, 7)

```

:::{style="font-size: 50%;"}
```{r}
#| echo: false
head(nhis2018, 10) |> gt()
```
:::


# Create New Variables

Use `mutate()` to create new variable(s)

Specify the data frame, followed by the new the expressions you want to use to create the new variables

::: columns
::: {.column width="70%; font-size: 90%;"}
```{r}
#| output: false

nhis2018 <- nhis2018 |>
  mutate(new_var = "hello",
         
         marital = factor(marital, 
                          levels=c(1,2,3,4,5,6,7,8,9), 
                          labels=c("Married - spouse in household",
                                   "Married - spouse not in household",
                                   "Married - spouse in household unknown",
                                   "Widowed",
                                   "Divorced", 
                                   "Separated", 
                                   "Never married", 
                                   "Living with partner",
                                   "Unknown marital status")))

        # Note: earlier labeing a factor was illustrated using 'base R'.
        # In this example, we use the tyidyverse package and mutate().

```
:::

::: {.column width="30%; font-size: 65%;"}
```{r}
#| echo: false

nhis2018 |>
  mutate(new_var = "hello") |>
  select(id, new_var, marital) |>
  slice(1:8) |>
  gt() |> tab_header(title="Result:")

```
:::
:::



## Simple Recoding

### Using `ifelse()`

Lets calculate BMI

-   First, use `ifelse()` to remove the values that specify the different types of missing data (see codebook)
-   Template of ifelse(): `ifelse(condition, value_if_true, value_if_false)`

::: columns
::: {.column width="75%; font-size: 85%;"}
```{r}
#| output: false

nhis2018 <- nhis2018 |>
  mutate(height_in = ifelse (height_in %in% c(96, 97, 98, 99), NA, height_in),
         weight_lb = ifelse(weight_lb >=996, NA, weight_lb),
         bmi = weight_lb / height_in^2 * 703)  # this is the formula for BMI


# Check
nhis2018 |>
  select (id, height_in, weight_lb, bmi) |>
  head(7)  # The number indicates how many rows/observations to print

# To check, you can alternatively, click on the name of the data set 
# in the 'Environment' window to see the entire data set

```
:::

::: {.column width="25%; font-size: 55%;"}
```{r}
#| echo: false

nhis2018 |>
  select (id, height_in, weight_lb, bmi) |>
  head(7) |> 
  gt() |> tab_header(title="Result:")

```
:::
:::



### Create/recode categorical variables

Use `cut()` to categorize continuous variables

-   Specify the lowest value, the cut off points, and the highest value
-   Subsequently, specify the labels for each category


Use `case_match()` to manually recode any variable

-   **_Important_**: The order of statement matters for `case_match()` - the new variable will have the value associated with the first condition that is met 


::: columns
::: {.column width="73%; font-size: 90%;"}
```{r}
#| output: false

nhis2018 <- nhis2018 |>
 mutate(bmi_category = cut(bmi, 
                           breaks=c(-Inf, 18.5, 25, 30, Inf), 
                           labels=c("Underweight", 
                                    "Healthy weight", 
                                    "Overweight", 
                                    "Obese")),
        
        bmi_binary = case_match(bmi_category, 
                          c("Underweight", "Healthy weight") ~ "Low",
                          "Overweight" ~ "High",
                          "Obese" ~ "High"))  

# Check
nhis2018 |>
  select (id, bmi, bmi_category, bmi_binary) |>
  head(12) # The number indicates how many rows/observations to print

# To check, you can alternatively, click on the name of the data set 
# in the 'Environment' window to see the entire data set

```
:::

::: {.column width="27%; font-size: 55%;"}
```{r}
#| echo: false

nhis2018 |>
  select (id, bmi, bmi_category, bmi_binary) |>
  head (12) |> 
  gt() |> tab_header(title="Result:")

```
:::
:::



## Complex Recoding

Use `case_when()` to recode using multiple conditions

-   **_Important_**: The order of statement matters for `case_when()`- the new variable will have the value associated with the first condition that is met 

::: {style="font-size: 95%;"}
```{r}
#| output: false

nhis2018 <- nhis2018 |>
  mutate(bmi_cateory2 = case_when (bmi < 18.5 ~ "Underweight",
                                  bmi <25 ~ "Healthy weight",
                                  bmi <30 ~ "Over weight",
                                  bmi>=30 ~ "Obese",
                                  .default  = NA),
    
    bmi_sex = case_when (bmi > 18 & bmi <25 & sex_factor == "Men" ~ "Healthy Weight Men",
                        bmi > 18 & bmi <25 & sex_factor == "Women" ~ "Healthy Weight Women",
                        sex_factor == "Men" & !is.na(bmi) ~ "Not-healthy weight Men",
                        sex_factor == "Women" & !is.na(bmi) ~ "Not-healthy weight Women"))


# Check by viewing the data
# Alternative, can use frequency tables to check:
count(nhis2018, sex_factor, bmi_cateory2, bmi_sex)

```
:::

::: columns
::: {.column width="60%; font-size: 80%;"}
```{r}
#| echo: false

count(nhis2018, sex_factor, bmi_cateory2, bmi_sex) |> 
  gt()

```
:::

::: {.column width="35%; font-size: 80%;"}
<br>
This table has a row for each unique combination of the variables, and an additional column (n) which indicates the count of observations for each unique combination of the variables. 

For example, the first row indicates that there are 46 individuals whose 'sex_factor' = Men, AND 'bmi_category2' = Health weight, AND 'bmi_sex' = Health Weight Men. 

Use this data to check the count for each combination, and check to ensure that all of the combinations listed align with what you would expect. 
:::
:::


## Working with Strings 

The *stringr* package (part of tidyverse) provides several useful functions to work with strings:

-   `str_detect()` checks if a pattern is present in a string.
-   `str_replace()` replaces a pattern in a string with another string.

```{r}
#| output: false

nhis2018 <- nhis2018 |>
  mutate(
    # Replace hyphens (-) with comma (,) 
    marital_new = str_replace(marital, " - ", ", "),

    # Recode based on a given pattern
    is_married = ifelse(str_detect(marital, "marri"), "Yes", "No"))


# Check 
count(nhis2018, marital, marital_new, is_married)
```

::: {style="font-size: 80%;"}
```{r}
#| echo: false

count(nhis2018, marital, marital_new, is_married) |>
  gt() 

```
:::


# Column-wise Operations

Use `across()` to *simultaneously* apply the same operation to multiple columns

Template: `across(variables, function, new_names_optional)` 

```{r}

# For the following variables, scores of >5 indicate missing values (see codebook)

nhis2018 <- nhis2018 |>
 mutate(across(c(asisad, asinerv, asirstls, asihopls, asieffrt, asiwthls), # variables
               ~ ifelse(.x>5, NA, .x),    # function to apply to each variable
              .names = "{.col}_v2"))      # (Optional) specify names of new variables

    
    # Note: ".x" is used as the placeholder for the variable when defining the function

```

::: {.columns}
::: {.column width="50%; text-align: center;"}
```{r}
# Check
count(nhis2018, asisad, asisad_v2)
```
:::

::: {.column width="50%; text-align: center;"}
```{r}
# Check
count(nhis2018, asinerv, asinerv_v2)
```
:::
:::


# Row-wise Operations

Perform operations over rows, e.g., mean of x, y, z

Use `pick()` to identify the variables that will be used

Example: K6 survey; the total score is calculated as the sum of 6 items:

```{r}
#| output: false

nhis2018 <- nhis2018 |>
  mutate(
     # Identify number of missing items for each participant
     K6_n_miss = rowSums(is.na(pick(asisad_v2, asinerv_v2, asirstls_v2, 
                                    asihopls_v2, asieffrt_v2, asiwthls_v2))),
      
     # Calculate the K6 score - the sume of 6 items
     K6_score = rowSums(pick(asisad_v2, asinerv_v2, asirstls_v2, asihopls_v2, 
                             asieffrt_v2, asiwthls_v2)),
     
     # Ensure that the total score is not calculated for those with missing items
     K6_score = ifelse(K6_n_miss>0, NA, K6_score))


# Check
nhis2018 |> 
  select(id, asisad_v2, asinerv_v2, asirstls_v2, asihopls_v2, asieffrt_v2, 
         asiwthls_v2, K6_score, K6_n_miss) |>
  head(5)
```

<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: false

nhis2018 |> 
  select(id, asisad_v2, asinerv_v2, asirstls_v2, asihopls_v2, asieffrt_v2, asiwthls_v2, K6_score, K6_n_miss) %>%
  head(5) |> gt()
```
:::


# Group By

Use `group_by()` to perform operations separately per group

-   Must follow-up with `ungroup()` to 'turn it off'

Lets, calculate z-scores using the sample data, separately for men & women:

```{r}
#| output: false

nhis2018 <- nhis2018 |>
  group_by(sex_factor) |>
    mutate(K6_grp_mean = mean(K6_score, na.rm=TRUE),
           K6_grp_sd = sd(K6_score, na.rm=TRUE),
           K6_z = (K6_score - K6_grp_mean) / K6_grp_sd) |>
  ungroup()  # ensure you "ungroup"


# Check
nhis2018 |>
  select (id, sex_factor, K6_score, K6_grp_mean, K6_grp_sd, K6_z) |>
  head(5)
```

<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: false

nhis2018 |>
  select (id, sex_factor, K6_score, K6_grp_mean, K6_grp_sd, K6_z) |>
  slice (1:6) |> gt()

```
:::




# Reshape (Pivot) Data {.smaller}

**Transitioning between long and wide data is a key skill**

Lets create some fake data to work with for this next excercise. 

::: columns
::: {.column width="65%; font-size: 85%"}
```{r}
# Set seed for reproducibility
set.seed(123)

# Create data frame
long_data <- data.frame(
                 ID = rep(1:5, each = 2),
                 Sex = sample(c("M", "F"), 10, replace = TRUE),
                 time = rep(1:2, times = 5),
                 QOL = sample(50:90, 10, replace = TRUE),
                 Anx = sample(26:44, 10, replace = TRUE),
                 Dep = sample(39:59, 10, replace = TRUE))

```
:::

::: {.column width="5%"}
:::

::: {.column width="30%; font-size: 75%"}
```{r}
#| echo: false
kable(long_data) 

```
:::
:::


## Long to Wide
Use `pivot_wider()` to transition from long to wide
```{r}
wide_data <- long_data %>%
 pivot_wider(
   names_from = "time",                # the repeating event variable
   values_from = c("QOL","Anx","Dep")) # variable with repeated observations

```


::: columns
::: {.column width="47%; font-size: 75%"}
long_data:
```{r}
#| echo: false
kable(long_data)
```
:::

::: {.column width="6%"}
:::

::: {.column width="47%; font-size: 75%"}
wide_data:
```{r}
#| echo: false
kable(wide_data)

```
:::
:::


## Wide to Long

Use `pivot_longer()` to transition from wide to long

If needed, it is easiest to rename variables to utilize a unique separator (e.g., _ or __) 

```{r}
long_data <- wide_data %>%
  pivot_longer(
    cols = QOL_1:Dep_2,             # variables to be transposed
    names_to = c(".value", "time"), # specify new column names
    names_sep = "_" )               # where the column name is broken up

```


::: columns
::: {.column width="47%; font-size: 75%"}
wide_data:
```{r}
#| echo: false
kable(wide_data)
```
:::

::: {.column width="6%"}
:::

::: {.column width="47%; font-size: 75%"}
long_data:
```{r}
#| echo: false
kable(long_data)

```
:::
:::




# Combining data frames

## Same participants, different variables:

-   `full_join()` keeps all observations
-   `inner_join()` keeps all observations that are in the first AND second data
-   `left_join()` keeps all observations in the first data
-   `right_join()` keeps all observations in the second data

To combine >2 data frames, run the function multiple times

```{r}
#| eval: false
new_data <- full_join (data_1, data_2, by="ID")

```


## Different participants, same variables

-   Columns with the exact same names will be merged
-   Others will be retained and include missing data where appropriate
```{r}
#| eval: false
new_data <- bind_rows (data_1, data_2)
```

<br>
<br>

# Suggested Work Flow & Organization

Use separate R Projects for each project, as described at the start of this tutorial. The folder created should contain the following:

-   '**.Rproj**' file, created automatically by R Projects and it links data and scripts
-   '**1_Data management**' R script for data cleaning  
-   '**2_Analysis**' R script for analyses of cleaned data
-   '**Data**' folder, containing original and clean data
-   '**Output**' folder, containing the final tables/figures
-   '**Report**' word document with your report/manuscript


#### Example Data Management File

```{r}
#| eval: false

# Load libraries
library(tidyverse)  # data wrangling
library(skimr)      # descriptive statistics

# Load data
nhis2018 <- read.csv("r_intro/nhis2018_SampleAdult.csv") |>
  clean_names() |> 
  remove_empty ("cols")

# Data cleaning
nhis2018_clean <- nhis2018 |>
   rename(age = age_p,
         marital = r_maritl,
         height_in = aheight,
         weight_lb = aweightp) |>
  filter(region >1) |>
  select(-sex)  |>
   mutate(height_in = ifelse (height_in %in% c(96, 97, 98, 99), NA, height_in),
         weight_lb = ifelse(weight_lb >=996, NA, weight_lb),
         bmi = weight_lb / height_in^2 * 703) 
  
# check
...

# Note the data cleaning code should be developed one command at a time, with
# checks performed at each step to ensure that things work as you expect. 


# Save clean version of data
saveRDS(nhis2018, "r_intro/nhis2018_clean.R")

```
  
  
  
#### Example Analysis File

```{r}
#| eval: false

# Load libraries
library(tidyverse)  # data wrangling
library(skimr)      # descriptive statistics

# Load data
data_clean <- readRDS("r_intro/nhis2018_clean.R")


# Descriptive statistics --------------------------------------------------------

marital.tab <- table(data_clean$marital)
write.csv(marital.tab, "output/Marital - frequency table.csv")

...


# Aim 1 - XXX --------------------------------------------------------------------

# Note: any comment line which includes at least four trailing dashes (-), 
# equal signs (=), or pound signs (#) automatically creates a code section. 
# These sections can be 'folded' to be hidden, allowing for easy navigation. 

...


# Aim 2 - XXX --------------------------------------------------------------------

...

```

